
import telebot
import openai
import os
import time
import csv
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

user_states = {}
user_answers = {}
user_resume = {}

csv_path = os.path.join(os.path.expanduser("~"), "Desktop", "brief_data.csv")

questions = [
    ["1.1", "–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?"],
    ["1.2", "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?"],
    ["1.3", "–° –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ –≤—ã –Ω–∞ —Ä—ã–Ω–∫–µ?"],
    ["1.4", "–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å–µ–π—á–∞—Å?"],
    ["1.5", "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã?"],
    ["2.1", "–ö–∞–∫–∞—è —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞?"],
    ["2.2", "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ?"],
    ["3.1", "–ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã / —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–æ–¥–∞—ë—Ç–µ?"],
    ["3.2", "–í —á—ë–º –≤–∞—à–µ –£–¢–ü / —Å—É–ø–µ—Ä–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?"],
    ["3.4", "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:"],
    ["3.5", "–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö?"],
    ["3.6", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å):"],
    ["3.7", "–ï—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã / –∫–µ–π—Å—ã / —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã?"],
    ["3.8", "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞?"],
    ["3.9", "–°—Ç–∏–ª–∏ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –≥–ª—è–Ω–µ—Ü –∏ —Ç.–¥.)."],
    ["3.10", "–ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?"],
    ["3.11", "–ù—É–∂–µ–Ω –ª–∏ –ª–æ–≥–æ—Ç–∏–ø? –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤–æ–ø—Ä–æ—Å—ã."],
    ["3.12", "–í–∞—à–∞ –∏–¥–µ—è."],
    ["4.1", "–ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–π—Ç?"],
    ["9.1", "–ß—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —É–Ω–µ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–∞?"],
    ["10.0", "–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—á—Ç–∞ –∏–ª–∏ –Ω–∏–∫ –≤ Telegram)?"]
]


def save_to_csv(user_id, question, answer):
    with open(csv_path, mode="a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now().strftime("%d.%m.%Y %H:%M"), user_id, question, answer])

def gpt_help(text, current_question):
    try:
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=f"–ü–æ–º–æ–≥–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ: {current_question}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {text}"
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )
        while True:
            run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run_status.status == "completed":
                break
            time.sleep(1)
        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        return messages.data[0].content[0].text.value
    except Exception as e:
        return f"GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if user_id in user_states and user_states[user_id] != None:
        bot.send_message(user_id, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /resume —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    user_states[user_id] = 0
    user_answers[user_id] = []
    user_resume[user_id] = 0
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º ChatGPT. –ï—Å–ª–∏ –≤–∞–º –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ —Å –∫–∞–∫–∏–º-—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é', '–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å' –∏–ª–∏ '–Ω–µ –ø–æ–Ω–∏–º–∞—é' ‚Äî –∏ —è –ø–æ–º–æ–≥—É üôÇ")
    bot.send_message(user_id, questions[0])

@bot.message_handler(commands=['resume'])
def resume(message):
    user_id = message.chat.id
    if user_id in user_resume:
        user_states[user_id] = user_resume[user_id]
        bot.send_message(user_id, f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ {questions[user_states[user_id]]}")
    else:
        bot.send_message(user_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@bot.message_handler(func=lambda m: True)
def handle_answer(message):
    user_id = message.chat.id
    step = user_states.get(user_id)

    if step is None or step >= len(questions):
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    text = message.text.strip().lower()
    current_question = questions[step]

    if "–ø–æ–º–æ—â—å" in text or "–Ω–µ –∑–Ω–∞—é" in text or "–Ω–µ –ø–æ–Ω–∏–º–∞—é" in text or "?" in text:
        hint = gpt_help(message.text, current_question)
        bot.send_message(user_id, f"ü§ñ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")
        return

    user_answers.setdefault(user_id, []).append(message.text)
    user_resume[user_id] = step + 1
    save_to_csv(user_id, current_question, message.text)

    if step + 1 < len(questions):
        user_states[user_id] += 1
        bot.send_message(user_id, questions[step + 1])
    else:
        bot.send_message(user_id, "‚úÖ –ë—Ä–∏—Ñ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ üôå\n–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–°–∫–æ—Ä–æ –¥–∏–∑–∞–π–Ω–µ—Ä –∏–∑—É—á–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ê–Ω–¥—Ä–µ—é –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏–ª–∏ –≤–∞—Ü–∞–ø.")
        user_states[user_id] = None
        summary = "\n".join(
            f"{questions[i]}\n–û—Ç–≤–µ—Ç: {user_answers[user_id][i]}\n"
            for i in range(len(questions))
        )
        bot.send_message(user_id, f"–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n{summary}")
        del user_answers[user_id]

bot.polling()
